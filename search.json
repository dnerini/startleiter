[
  {
    "objectID": "statistics_santamaria.html",
    "href": "statistics_santamaria.html",
    "title": "Santa Maria",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 7\nCode\nfrom datetime import datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights\n\nengine = get_engine()\ndf = get_flights(engine, TARGET_SITE_ID)"
  },
  {
    "objectID": "statistics_santamaria.html#annual-statistics",
    "href": "statistics_santamaria.html#annual-statistics",
    "title": "Santa Maria",
    "section": "Annual statistics",
    "text": "Annual statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Year\")\n\n\n\n\n\nFigure 1: Total number of flights per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).max_altitude_m\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max altitude [masl]\", xlabel=\"Year\")\n\n\n\n\n\nFigure 2: Maximum flight altitude per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).length_km\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max distance [km]\")\n\n\n\n\n\nFigure 3: Maximum flight distance per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).airtime_hours\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max airtime [h]\")\n\n\n\n\n\nFigure 4: Maximum flight duration per year"
  },
  {
    "objectID": "statistics_santamaria.html#monthly-statistics",
    "href": "statistics_santamaria.html#monthly-statistics",
    "title": "Santa Maria",
    "section": "Monthly statistics",
    "text": "Monthly statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.month).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Month\")\n\n\n\n\n\nFigure 5: Total number of flights per month\n\n\n\n\n\n\nCode\nmonths = pd.date_range(\"1900-01-01\", \"1900-12-01\", freq='MS').strftime(\"%b\")\nax = sns.catplot(x=\"month\", y=\"max_altitude_m\", order=months, data=df)\n\n\n\n\n\nFigure 6: Maximum flight altitude per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"length_km\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 7: Maximum flight distance per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"airtime_hours\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 8: Maximum flight duration per month"
  },
  {
    "objectID": "statistics.html",
    "href": "statistics.html",
    "title": "Statistics",
    "section": "",
    "text": "Site statistics are based on flight reports extracted from XContest. The plots and figures are updated once a week.\n\n\n\n\n\n\n\n\n  \n\n\n\n\nCarì\n\n\n2000 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nCimetta\n\n\n1600 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMonte Generoso\n\n\n1600 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMonte Lema\n\n\n1600 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMonte Tamaro\n\n\n1500 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMornera\n\n\n1400 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSanta Maria\n\n\n1200 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "monitoring_cimetta.html",
    "href": "monitoring_cimetta.html",
    "title": "Cimetta",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 1\n\n\n\n\nCode\nfrom datetime import date, datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights, get_predictions\n\nengine = get_engine()\ndf_flight = get_flights(engine, TARGET_SITE_ID)\ndf_pred = get_predictions(engine, TARGET_SITE_ID)\n\n\n\n\nCode\ntoday_idx = df_pred.reftime==pd.to_datetime(date.today())\ndf_pred[today_idx].drop([\"id\", \"reftime\", \"source_id\", \"leadtime_days\"], axis=1)\n\n\n\n\n\n\nPredictions for the next days. \n\n\n\nvalidtime\nflying_probability\nmax_altitude_masl\nmax_distance_km\n\n\n\n\n7089\n2023-05-04\n0.682101\n3200.0\n125.0\n\n\n7096\n2023-05-05\n0.682940\n3200.0\n125.0\n\n\n7103\n2023-05-06\n0.672913\n3200.0\n125.0\n\n\n7110\n2023-05-07\n0.722573\n3200.0\n125.0\n\n\n7117\n2023-05-08\n0.591856\n2400.0\n125.0\n\n\n7124\n2023-05-09\n0.507619\n2400.0\n125.0\n\n\n7131\n2023-05-10\n0.866707\n3200.0\n125.0\n\n\n7138\n2023-05-11\n0.372496\n2400.0\n50.0\n\n\n7145\n2023-05-12\n0.707605\n2400.0\n125.0\n\n\n\n\n\n\n\n\n\nCode\nsns.set()\n\nts = df_flight.set_index(\"datetime\").sort_index()\nkeep_cols = [\"date\", \"max_altitude_m\", \"length_km\", \"airtime_hours\"]\nts = ts[keep_cols]\nempty_row = pd.Series(name=pd.Timestamp.today(tz=\"UTC\"), data=[None,] * len(keep_cols), index=keep_cols)\nts = pd.concat([ts, empty_row.to_frame().transpose()])\n\n# compute reference statistics\nn_years = 6\nclim = ts.resample(\"1D\").mean(numeric_only=True)\nclim = clim.groupby(clim.index.isocalendar().week)\nclim = clim.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim = clim.sort_index().rolling(\"20D\", center=True).mean()\n\nclim_counts = ts.date.resample(\"1D\").count()\nclim_counts = clim_counts.where(clim_counts &gt; 0)\nclim_counts = clim_counts.groupby(clim_counts.index.isocalendar().week)\nclim_counts = clim_counts.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim_counts = clim_counts.sort_index().rolling(\"20D\", center=True).mean()\n\nclim = clim[clim.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\nclim_counts = clim_counts[clim_counts.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfs = df_flight[df_flight.datetime &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfg = dfs.groupby(df_flight.date).datetime.count()\n\nfig, axs = plt.subplots(4, sharex=True, figsize=(7, 10))\n\n# reference lines\naxs[0].plot(clim_counts.index, clim_counts.values, color=\"tab:red\")\naxs[1].plot(clim.index, clim.max_altitude_m, color=\"tab:red\")\naxs[2].plot(clim.index, clim.length_km, color=\"tab:red\")\naxs[3].plot(clim.index, clim.airtime_hours, color=\"tab:red\")\n\n# predictions\npred = df_pred[df_pred.leadtime_days==0].set_index(\"validtime\").sort_index()\naxs[0].twinx().step(pred.index, pred.flying_probability, color=\"gray\", alpha=0.5)\ntwinx = plt.gca()\ntwinx.grid(None)\ntwinx.set_ylim([0, 1])\ntwinx.set_ylabel(\"Flyability []\")\naxs[1].step(pred.index, pred.max_altitude_masl, color=\"gray\", alpha=0.5)\naxs[2].step(pred.index, pred.max_distance_km, color=\"gray\", alpha=0.5)\n\n# plot individual flights\nax0 = sns.scatterplot(x=dfg.index, y=dfg.values, marker=\"x\", ax=axs[0])\nax1 = sns.scatterplot(x=\"datetime\", y=\"max_altitude_m\", marker=\"x\", data=dfs, ax=axs[1])\nax2 = sns.scatterplot(x=\"datetime\", y=\"length_km\", marker=\"x\", data=dfs, ax=axs[2])\nax3 = sns.scatterplot(x=\"datetime\", y=\"airtime_hours\", marker=\"x\", data=dfs, ax=axs[3])\n\nax0.set(ylabel=\"No. flights per day\")\nax1.set(ylabel=\"Max altitude [m]\")\nax2.set(ylabel=\"Distance [km]\")\nax3.set(ylabel=\"Airtime [h]\")\n\nplt.xticks(rotation=30)\nplt.tight_layout()\n\n\n\n\n\nFigure 1: Overview over the past 90 days"
  },
  {
    "objectID": "monitoring_mornera.html",
    "href": "monitoring_mornera.html",
    "title": "Mornera",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 5\n\n\n\n\nCode\nfrom datetime import date, datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights, get_predictions\n\nengine = get_engine()\ndf_flight = get_flights(engine, TARGET_SITE_ID)\ndf_pred = get_predictions(engine, TARGET_SITE_ID)\n\n\n\n\nCode\ntoday_idx = df_pred.reftime==pd.to_datetime(date.today())\ndf_pred[today_idx].drop([\"id\", \"reftime\", \"source_id\", \"leadtime_days\"], axis=1)\n\n\n\n\n\n\nPredictions for the next days. \n\n\n\nvalidtime\nflying_probability\nmax_altitude_masl\nmax_distance_km\n\n\n\n\n7091\n2023-05-04\n0.502395\n3400.0\n150.0\n\n\n7098\n2023-05-05\n0.500613\n3400.0\n150.0\n\n\n7105\n2023-05-06\n0.485427\n3400.0\n150.0\n\n\n7112\n2023-05-07\n0.592402\n3400.0\n150.0\n\n\n7119\n2023-05-08\n0.372476\n2200.0\n150.0\n\n\n7126\n2023-05-09\n0.372256\n2200.0\n150.0\n\n\n7133\n2023-05-10\n0.756294\n3400.0\n200.0\n\n\n7140\n2023-05-11\n0.357475\n2200.0\n100.0\n\n\n7147\n2023-05-12\n0.600979\n3400.0\n150.0\n\n\n\n\n\n\n\n\n\nCode\nsns.set()\n\nts = df_flight.set_index(\"datetime\").sort_index()\nkeep_cols = [\"date\", \"max_altitude_m\", \"length_km\", \"airtime_hours\"]\nts = ts[keep_cols]\nempty_row = pd.Series(name=pd.Timestamp.today(tz=\"UTC\"), data=[None,] * len(keep_cols), index=keep_cols)\nts = pd.concat([ts, empty_row.to_frame().transpose()])\n\n# compute reference statistics\nn_years = 6\nclim = ts.resample(\"1D\").mean(numeric_only=True)\nclim = clim.groupby(clim.index.isocalendar().week)\nclim = clim.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim = clim.sort_index().rolling(\"20D\", center=True).mean()\n\nclim_counts = ts.date.resample(\"1D\").count()\nclim_counts = clim_counts.where(clim_counts &gt; 0)\nclim_counts = clim_counts.groupby(clim_counts.index.isocalendar().week)\nclim_counts = clim_counts.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim_counts = clim_counts.sort_index().rolling(\"20D\", center=True).mean()\n\nclim = clim[clim.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\nclim_counts = clim_counts[clim_counts.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfs = df_flight[df_flight.datetime &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfg = dfs.groupby(df_flight.date).datetime.count()\n\nfig, axs = plt.subplots(4, sharex=True, figsize=(7, 10))\n\n# reference lines\naxs[0].plot(clim_counts.index, clim_counts.values, color=\"tab:red\")\naxs[1].plot(clim.index, clim.max_altitude_m, color=\"tab:red\")\naxs[2].plot(clim.index, clim.length_km, color=\"tab:red\")\naxs[3].plot(clim.index, clim.airtime_hours, color=\"tab:red\")\n\n# predictions\npred = df_pred[df_pred.leadtime_days==0].set_index(\"validtime\").sort_index()\naxs[0].twinx().step(pred.index, pred.flying_probability, color=\"gray\", alpha=0.5)\ntwinx = plt.gca()\ntwinx.grid(None)\ntwinx.set_ylim([0, 1])\ntwinx.set_ylabel(\"Flyability []\")\naxs[1].step(pred.index, pred.max_altitude_masl, color=\"gray\", alpha=0.5)\naxs[2].step(pred.index, pred.max_distance_km, color=\"gray\", alpha=0.5)\n\n# plot individual flights\nax0 = sns.scatterplot(x=dfg.index, y=dfg.values, marker=\"x\", ax=axs[0])\nax1 = sns.scatterplot(x=\"datetime\", y=\"max_altitude_m\", marker=\"x\", data=dfs, ax=axs[1])\nax2 = sns.scatterplot(x=\"datetime\", y=\"length_km\", marker=\"x\", data=dfs, ax=axs[2])\nax3 = sns.scatterplot(x=\"datetime\", y=\"airtime_hours\", marker=\"x\", data=dfs, ax=axs[3])\n\nax0.set(ylabel=\"No. flights per day\")\nax1.set(ylabel=\"Max altitude [m]\")\nax2.set(ylabel=\"Distance [km]\")\nax3.set(ylabel=\"Airtime [h]\")\n\nplt.xticks(rotation=30)\nplt.tight_layout()\n\n\n\n\n\nFigure 1: Overview over the past 90 days"
  },
  {
    "objectID": "monitoring_montegeneroso.html",
    "href": "monitoring_montegeneroso.html",
    "title": "Monte Generoso",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 4\n\n\n\n\nCode\nfrom datetime import date, datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights, get_predictions\n\nengine = get_engine()\ndf_flight = get_flights(engine, TARGET_SITE_ID)\ndf_pred = get_predictions(engine, TARGET_SITE_ID)\n\n\n\n\nCode\ntoday_idx = df_pred.reftime==pd.to_datetime(date.today())\ndf_pred[today_idx].drop([\"id\", \"reftime\", \"source_id\", \"leadtime_days\"], axis=1)\n\n\n\n\n\n\nPredictions for the next days. \n\n\n\nvalidtime\nflying_probability\nmax_altitude_masl\nmax_distance_km\n\n\n\n\n7092\n2023-05-04\n0.813687\n2400.0\n125.0\n\n\n7099\n2023-05-05\n0.803660\n2400.0\n125.0\n\n\n7106\n2023-05-06\n0.793712\n2400.0\n125.0\n\n\n7113\n2023-05-07\n0.835381\n2400.0\n125.0\n\n\n7120\n2023-05-08\n0.709716\n2400.0\n125.0\n\n\n7127\n2023-05-09\n0.663097\n2400.0\n50.0\n\n\n7134\n2023-05-10\n0.930923\n3600.0\n125.0\n\n\n7141\n2023-05-11\n0.571474\n2400.0\n50.0\n\n\n7148\n2023-05-12\n0.796011\n2400.0\n125.0\n\n\n\n\n\n\n\n\n\nCode\nsns.set()\n\nts = df_flight.set_index(\"datetime\").sort_index()\nkeep_cols = [\"date\", \"max_altitude_m\", \"length_km\", \"airtime_hours\"]\nts = ts[keep_cols]\nempty_row = pd.Series(name=pd.Timestamp.today(tz=\"UTC\"), data=[None,] * len(keep_cols), index=keep_cols)\nts = pd.concat([ts, empty_row.to_frame().transpose()])\n\n# compute reference statistics\nn_years = 6\nclim = ts.resample(\"1D\").mean(numeric_only=True)\nclim = clim.groupby(clim.index.isocalendar().week)\nclim = clim.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim = clim.sort_index().rolling(\"20D\", center=True).mean()\n\nclim_counts = ts.date.resample(\"1D\").count()\nclim_counts = clim_counts.where(clim_counts &gt; 0)\nclim_counts = clim_counts.groupby(clim_counts.index.isocalendar().week)\nclim_counts = clim_counts.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim_counts = clim_counts.sort_index().rolling(\"20D\", center=True).mean()\n\nclim = clim[clim.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\nclim_counts = clim_counts[clim_counts.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfs = df_flight[df_flight.datetime &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfg = dfs.groupby(df_flight.date).datetime.count()\n\nfig, axs = plt.subplots(4, sharex=True, figsize=(7, 10))\n\n# reference lines\naxs[0].plot(clim_counts.index, clim_counts.values, color=\"tab:red\")\naxs[1].plot(clim.index, clim.max_altitude_m, color=\"tab:red\")\naxs[2].plot(clim.index, clim.length_km, color=\"tab:red\")\naxs[3].plot(clim.index, clim.airtime_hours, color=\"tab:red\")\n\n# predictions\npred = df_pred[df_pred.leadtime_days==0].set_index(\"validtime\").sort_index()\naxs[0].twinx().step(pred.index, pred.flying_probability, color=\"gray\", alpha=0.5)\ntwinx = plt.gca()\ntwinx.grid(None)\ntwinx.set_ylim([0, 1])\ntwinx.set_ylabel(\"Flyability []\")\naxs[1].step(pred.index, pred.max_altitude_masl, color=\"gray\", alpha=0.5)\naxs[2].step(pred.index, pred.max_distance_km, color=\"gray\", alpha=0.5)\n\n# plot individual flights\nax0 = sns.scatterplot(x=dfg.index, y=dfg.values, marker=\"x\", ax=axs[0])\nax1 = sns.scatterplot(x=\"datetime\", y=\"max_altitude_m\", marker=\"x\", data=dfs, ax=axs[1])\nax2 = sns.scatterplot(x=\"datetime\", y=\"length_km\", marker=\"x\", data=dfs, ax=axs[2])\nax3 = sns.scatterplot(x=\"datetime\", y=\"airtime_hours\", marker=\"x\", data=dfs, ax=axs[3])\n\nax0.set(ylabel=\"No. flights per day\")\nax1.set(ylabel=\"Max altitude [m]\")\nax2.set(ylabel=\"Distance [km]\")\nax3.set(ylabel=\"Airtime [h]\")\n\nplt.xticks(rotation=30)\nplt.tight_layout()\n\n\n\n\n\nFigure 1: Overview over the past 90 days"
  },
  {
    "objectID": "monitoring_cari.html",
    "href": "monitoring_cari.html",
    "title": "Carì",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 2\n\n\n\n\nCode\nfrom datetime import date, datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights, get_predictions\n\nengine = get_engine()\ndf_flight = get_flights(engine, TARGET_SITE_ID)\ndf_pred = get_predictions(engine, TARGET_SITE_ID)\n\n\n\n\nCode\ntoday_idx = df_pred.reftime==pd.to_datetime(date.today())\ndf_pred[today_idx].drop([\"id\", \"reftime\", \"source_id\", \"leadtime_days\"], axis=1)\n\n\n\n\n\n\nPredictions for the next days. \n\n\n\nvalidtime\nflying_probability\nmax_altitude_masl\nmax_distance_km\n\n\n\n\n7090\n2023-05-04\n0.359304\n2800.0\n200.0\n\n\n7097\n2023-05-05\n0.360122\n2800.0\n200.0\n\n\n7104\n2023-05-06\n0.356255\n2800.0\n125.0\n\n\n7111\n2023-05-07\n0.372147\n2800.0\n150.0\n\n\n7118\n2023-05-08\n0.316980\n2800.0\n200.0\n\n\n7125\n2023-05-09\n0.263068\n2800.0\n200.0\n\n\n7132\n2023-05-10\n0.520565\n3600.0\n125.0\n\n\n7139\n2023-05-11\n0.174773\n2800.0\n50.0\n\n\n7146\n2023-05-12\n0.372236\n2800.0\n200.0\n\n\n\n\n\n\n\n\n\nCode\nsns.set()\n\nts = df_flight.set_index(\"datetime\").sort_index()\nkeep_cols = [\"date\", \"max_altitude_m\", \"length_km\", \"airtime_hours\"]\nts = ts[keep_cols]\nempty_row = pd.Series(name=pd.Timestamp.today(tz=\"UTC\"), data=[None,] * len(keep_cols), index=keep_cols)\nts = pd.concat([ts, empty_row.to_frame().transpose()])\n\n# compute reference statistics\nn_years = 6\nclim = ts.resample(\"1D\").mean(numeric_only=True)\nclim = clim.groupby(clim.index.isocalendar().week)\nclim = clim.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim = clim.sort_index().rolling(\"20D\", center=True).mean()\n\nclim_counts = ts.date.resample(\"1D\").count()\nclim_counts = clim_counts.where(clim_counts &gt; 0)\nclim_counts = clim_counts.groupby(clim_counts.index.isocalendar().week)\nclim_counts = clim_counts.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim_counts = clim_counts.sort_index().rolling(\"20D\", center=True).mean()\n\nclim = clim[clim.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\nclim_counts = clim_counts[clim_counts.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfs = df_flight[df_flight.datetime &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfg = dfs.groupby(df_flight.date).datetime.count()\n\nfig, axs = plt.subplots(4, sharex=True, figsize=(7, 10))\n\n# reference lines\naxs[0].plot(clim_counts.index, clim_counts.values, color=\"tab:red\")\naxs[1].plot(clim.index, clim.max_altitude_m, color=\"tab:red\")\naxs[2].plot(clim.index, clim.length_km, color=\"tab:red\")\naxs[3].plot(clim.index, clim.airtime_hours, color=\"tab:red\")\n\n# predictions\npred = df_pred[df_pred.leadtime_days==0].set_index(\"validtime\").sort_index()\naxs[0].twinx().step(pred.index, pred.flying_probability, color=\"gray\", alpha=0.5)\ntwinx = plt.gca()\ntwinx.grid(None)\ntwinx.set_ylim([0, 1])\ntwinx.set_ylabel(\"Flyability []\")\naxs[1].step(pred.index, pred.max_altitude_masl, color=\"gray\", alpha=0.5)\naxs[2].step(pred.index, pred.max_distance_km, color=\"gray\", alpha=0.5)\n\n# plot individual flights\nax0 = sns.scatterplot(x=dfg.index, y=dfg.values, marker=\"x\", ax=axs[0])\nax1 = sns.scatterplot(x=\"datetime\", y=\"max_altitude_m\", marker=\"x\", data=dfs, ax=axs[1])\nax2 = sns.scatterplot(x=\"datetime\", y=\"length_km\", marker=\"x\", data=dfs, ax=axs[2])\nax3 = sns.scatterplot(x=\"datetime\", y=\"airtime_hours\", marker=\"x\", data=dfs, ax=axs[3])\n\nax0.set(ylabel=\"No. flights per day\")\nax1.set(ylabel=\"Max altitude [m]\")\nax2.set(ylabel=\"Distance [km]\")\nax3.set(ylabel=\"Airtime [h]\")\n\nplt.xticks(rotation=30)\nplt.tight_layout()\n\n\n\n\n\nFigure 1: Overview over the past 90 days"
  },
  {
    "objectID": "statistics_montegeneroso.html",
    "href": "statistics_montegeneroso.html",
    "title": "Monte Generoso",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 4\nCode\nfrom datetime import datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights\n\nengine = get_engine()\ndf = get_flights(engine, TARGET_SITE_ID)"
  },
  {
    "objectID": "statistics_montegeneroso.html#annual-statistics",
    "href": "statistics_montegeneroso.html#annual-statistics",
    "title": "Monte Generoso",
    "section": "Annual statistics",
    "text": "Annual statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Year\")\n\n\n\n\n\nFigure 1: Total number of flights per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).max_altitude_m\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max altitude [masl]\", xlabel=\"Year\")\n\n\n\n\n\nFigure 2: Maximum flight altitude per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).length_km\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max distance [km]\")\n\n\n\n\n\nFigure 3: Maximum flight distance per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).airtime_hours\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max airtime [h]\")\n\n\n\n\n\nFigure 4: Maximum flight duration per year"
  },
  {
    "objectID": "statistics_montegeneroso.html#monthly-statistics",
    "href": "statistics_montegeneroso.html#monthly-statistics",
    "title": "Monte Generoso",
    "section": "Monthly statistics",
    "text": "Monthly statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.month).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Month\")\n\n\n\n\n\nFigure 5: Total number of flights per month\n\n\n\n\n\n\nCode\nmonths = pd.date_range(\"1900-01-01\", \"1900-12-01\", freq='MS').strftime(\"%b\")\nax = sns.catplot(x=\"month\", y=\"max_altitude_m\", order=months, data=df)\n\n\n\n\n\nFigure 6: Maximum flight altitude per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"length_km\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 7: Maximum flight distance per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"airtime_hours\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 8: Maximum flight duration per month"
  },
  {
    "objectID": "monitoring_santamaria.html",
    "href": "monitoring_santamaria.html",
    "title": "Santa Maria",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 7\n\n\n\n\nCode\nfrom datetime import date, datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights, get_predictions\n\nengine = get_engine()\ndf_flight = get_flights(engine, TARGET_SITE_ID)\ndf_pred = get_predictions(engine, TARGET_SITE_ID)\n\n\n\n\nCode\ntoday_idx = df_pred.reftime==pd.to_datetime(date.today())\ndf_pred[today_idx].drop([\"id\", \"reftime\", \"source_id\", \"leadtime_days\"], axis=1)\n\n\n\n\n\n\nPredictions for the next days. \n\n\n\nvalidtime\nflying_probability\nmax_altitude_masl\nmax_distance_km\n\n\n\n\n7095\n2023-05-04\n0.786181\n3200.0\n150.0\n\n\n7102\n2023-05-05\n0.777849\n3200.0\n150.0\n\n\n7109\n2023-05-06\n0.767800\n2000.0\n150.0\n\n\n7116\n2023-05-07\n0.812846\n3200.0\n150.0\n\n\n7123\n2023-05-08\n0.688778\n2000.0\n150.0\n\n\n7130\n2023-05-09\n0.640792\n2000.0\n150.0\n\n\n7137\n2023-05-10\n0.914688\n3200.0\n200.0\n\n\n7144\n2023-05-11\n0.531252\n2000.0\n50.0\n\n\n7151\n2023-05-12\n0.775480\n3200.0\n150.0\n\n\n\n\n\n\n\n\n\nCode\nsns.set()\n\nts = df_flight.set_index(\"datetime\").sort_index()\nkeep_cols = [\"date\", \"max_altitude_m\", \"length_km\", \"airtime_hours\"]\nts = ts[keep_cols]\nempty_row = pd.Series(name=pd.Timestamp.today(tz=\"UTC\"), data=[None,] * len(keep_cols), index=keep_cols)\nts = pd.concat([ts, empty_row.to_frame().transpose()])\n\n# compute reference statistics\nn_years = 6\nclim = ts.resample(\"1D\").mean(numeric_only=True)\nclim = clim.groupby(clim.index.isocalendar().week)\nclim = clim.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim = clim.sort_index().rolling(\"20D\", center=True).mean()\n\nclim_counts = ts.date.resample(\"1D\").count()\nclim_counts = clim_counts.where(clim_counts &gt; 0)\nclim_counts = clim_counts.groupby(clim_counts.index.isocalendar().week)\nclim_counts = clim_counts.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim_counts = clim_counts.sort_index().rolling(\"20D\", center=True).mean()\n\nclim = clim[clim.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\nclim_counts = clim_counts[clim_counts.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfs = df_flight[df_flight.datetime &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfg = dfs.groupby(df_flight.date).datetime.count()\n\nfig, axs = plt.subplots(4, sharex=True, figsize=(7, 10))\n\n# reference lines\naxs[0].plot(clim_counts.index, clim_counts.values, color=\"tab:red\")\naxs[1].plot(clim.index, clim.max_altitude_m, color=\"tab:red\")\naxs[2].plot(clim.index, clim.length_km, color=\"tab:red\")\naxs[3].plot(clim.index, clim.airtime_hours, color=\"tab:red\")\n\n# predictions\npred = df_pred[df_pred.leadtime_days==0].set_index(\"validtime\").sort_index()\naxs[0].twinx().step(pred.index, pred.flying_probability, color=\"gray\", alpha=0.5)\ntwinx = plt.gca()\ntwinx.grid(None)\ntwinx.set_ylim([0, 1])\ntwinx.set_ylabel(\"Flyability []\")\naxs[1].step(pred.index, pred.max_altitude_masl, color=\"gray\", alpha=0.5)\naxs[2].step(pred.index, pred.max_distance_km, color=\"gray\", alpha=0.5)\n\n# plot individual flights\nax0 = sns.scatterplot(x=dfg.index, y=dfg.values, marker=\"x\", ax=axs[0])\nax1 = sns.scatterplot(x=\"datetime\", y=\"max_altitude_m\", marker=\"x\", data=dfs, ax=axs[1])\nax2 = sns.scatterplot(x=\"datetime\", y=\"length_km\", marker=\"x\", data=dfs, ax=axs[2])\nax3 = sns.scatterplot(x=\"datetime\", y=\"airtime_hours\", marker=\"x\", data=dfs, ax=axs[3])\n\nax0.set(ylabel=\"No. flights per day\")\nax1.set(ylabel=\"Max altitude [m]\")\nax2.set(ylabel=\"Distance [km]\")\nax3.set(ylabel=\"Airtime [h]\")\n\nplt.xticks(rotation=30)\nplt.tight_layout()\n\n\n\n\n\nFigure 1: Overview over the past 90 days"
  },
  {
    "objectID": "statistics_mornera.html",
    "href": "statistics_mornera.html",
    "title": "Mornera",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 5\nCode\nfrom datetime import datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights\n\nengine = get_engine()\ndf = get_flights(engine, TARGET_SITE_ID)"
  },
  {
    "objectID": "statistics_mornera.html#annual-statistics",
    "href": "statistics_mornera.html#annual-statistics",
    "title": "Mornera",
    "section": "Annual statistics",
    "text": "Annual statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Year\")\n\n\n\n\n\nFigure 1: Total number of flights per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).max_altitude_m\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max altitude [masl]\", xlabel=\"Year\")\n\n\n\n\n\nFigure 2: Maximum flight altitude per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).length_km\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max distance [km]\")\n\n\n\n\n\nFigure 3: Maximum flight distance per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).airtime_hours\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max airtime [h]\")\n\n\n\n\n\nFigure 4: Maximum flight duration per year"
  },
  {
    "objectID": "statistics_mornera.html#monthly-statistics",
    "href": "statistics_mornera.html#monthly-statistics",
    "title": "Mornera",
    "section": "Monthly statistics",
    "text": "Monthly statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.month).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Month\")\n\n\n\n\n\nFigure 5: Total number of flights per month\n\n\n\n\n\n\nCode\nmonths = pd.date_range(\"1900-01-01\", \"1900-12-01\", freq='MS').strftime(\"%b\")\nax = sns.catplot(x=\"month\", y=\"max_altitude_m\", order=months, data=df)\n\n\n\n\n\nFigure 6: Maximum flight altitude per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"length_km\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 7: Maximum flight distance per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"airtime_hours\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 8: Maximum flight duration per month"
  },
  {
    "objectID": "statistics_cimetta.html",
    "href": "statistics_cimetta.html",
    "title": "Cimetta",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 1\nCode\nfrom datetime import datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights\n\nengine = get_engine()\ndf = get_flights(engine, TARGET_SITE_ID)"
  },
  {
    "objectID": "statistics_cimetta.html#annual-statistics",
    "href": "statistics_cimetta.html#annual-statistics",
    "title": "Cimetta",
    "section": "Annual statistics",
    "text": "Annual statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Year\")\n\n\n\n\n\nFigure 1: Total number of flights per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).max_altitude_m\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max altitude [masl]\", xlabel=\"Year\")\n\n\n\n\n\nFigure 2: Maximum flight altitude per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).length_km\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max distance [km]\")\n\n\n\n\n\nFigure 3: Maximum flight distance per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).airtime_hours\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max airtime [h]\")\n\n\n\n\n\nFigure 4: Maximum flight duration per year"
  },
  {
    "objectID": "statistics_cimetta.html#monthly-statistics",
    "href": "statistics_cimetta.html#monthly-statistics",
    "title": "Cimetta",
    "section": "Monthly statistics",
    "text": "Monthly statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.month).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Month\")\n\n\n\n\n\nFigure 5: Total number of flights per month\n\n\n\n\n\n\nCode\nmonths = pd.date_range(\"1900-01-01\", \"1900-12-01\", freq='MS').strftime(\"%b\")\nax = sns.catplot(x=\"month\", y=\"max_altitude_m\", order=months, data=df)\n\n\n\n\n\nFigure 6: Maximum flight altitude per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"length_km\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 7: Maximum flight distance per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"airtime_hours\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 8: Maximum flight duration per month"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Startleiter",
    "section": "",
    "text": "Welcome to Starleiter! In this project, I used data analysis and machine learning techniques to explore the relationship between the atmospheric conditions and paragliding."
  },
  {
    "objectID": "index.html#project-overview",
    "href": "index.html#project-overview",
    "title": "Startleiter",
    "section": "Project Overview",
    "text": "Project Overview\nStartleiter is a recommendation system for paragliding pilots. Based on the nearest and most recently available radio-sounding, it computes the probability of flying on the current day, as well as the expected maximum flying height and distance.\nThe prediction model, a one-dimensional convolutional neural network (1D CNN), is trained on radio-sounding data from UWYO and flight reports from XContest. Startleiter also includes an explainability plot based on SHAP to gain insights on the output of the machine learning model, for example:"
  },
  {
    "objectID": "index.html#project-components",
    "href": "index.html#project-components",
    "title": "Startleiter",
    "section": "Project Components",
    "text": "Project Components\nThe project consists of the following components:\n\nData extraction.\nData exploration and visualization.\nData preprocessing and feature engineering.\nModel training and evaluation.\nPredictions."
  },
  {
    "objectID": "index.html#credits-and-sources",
    "href": "index.html#credits-and-sources",
    "title": "Startleiter",
    "section": "Credits and Sources",
    "text": "Credits and Sources\n\nFlight reports: XContest\nAtmospheric soundings: University of Wyoming\nGFS forecast data: NOAA\nExplainability score: SHAP\nSkewT plot: MetPy"
  },
  {
    "objectID": "statistics_montelema.html",
    "href": "statistics_montelema.html",
    "title": "Monte Lema",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 6\nCode\nfrom datetime import datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights\n\nengine = get_engine()\ndf = get_flights(engine, TARGET_SITE_ID)"
  },
  {
    "objectID": "statistics_montelema.html#annual-statistics",
    "href": "statistics_montelema.html#annual-statistics",
    "title": "Monte Lema",
    "section": "Annual statistics",
    "text": "Annual statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Year\")\n\n\n\n\n\nFigure 1: Total number of flights per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).max_altitude_m\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max altitude [masl]\", xlabel=\"Year\")\n\n\n\n\n\nFigure 2: Maximum flight altitude per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).length_km\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max distance [km]\")\n\n\n\n\n\nFigure 3: Maximum flight distance per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).airtime_hours\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max airtime [h]\")\n\n\n\n\n\nFigure 4: Maximum flight duration per year"
  },
  {
    "objectID": "statistics_montelema.html#monthly-statistics",
    "href": "statistics_montelema.html#monthly-statistics",
    "title": "Monte Lema",
    "section": "Monthly statistics",
    "text": "Monthly statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.month).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Month\")\n\n\n\n\n\nFigure 5: Total number of flights per month\n\n\n\n\n\n\nCode\nmonths = pd.date_range(\"1900-01-01\", \"1900-12-01\", freq='MS').strftime(\"%b\")\nax = sns.catplot(x=\"month\", y=\"max_altitude_m\", order=months, data=df)\n\n\n\n\n\nFigure 6: Maximum flight altitude per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"length_km\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 7: Maximum flight distance per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"airtime_hours\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 8: Maximum flight duration per month"
  },
  {
    "objectID": "monitoring.html",
    "href": "monitoring.html",
    "title": "Predictions",
    "section": "",
    "text": "Carì\n\n\n2000 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nCimetta\n\n\n1600 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMonte Generoso\n\n\n1600 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMonte Lema\n\n\n1600 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMonte Tamaro\n\n\n1500 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMornera\n\n\n1400 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSanta Maria\n\n\n1200 masl\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "monitoring_montetamaro.html",
    "href": "monitoring_montetamaro.html",
    "title": "Monte Tamaro",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 3\n\n\n\n\nCode\nfrom datetime import date, datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights, get_predictions\n\nengine = get_engine()\ndf_flight = get_flights(engine, TARGET_SITE_ID)\ndf_pred = get_predictions(engine, TARGET_SITE_ID)\n\n\n\n\nCode\ntoday_idx = df_pred.reftime==pd.to_datetime(date.today())\ndf_pred[today_idx].drop([\"id\", \"reftime\", \"source_id\", \"leadtime_days\"], axis=1)\n\n\n\n\n\n\nPredictions for the next days. \n\n\n\nvalidtime\nflying_probability\nmax_altitude_masl\nmax_distance_km\n\n\n\n\n7094\n2023-05-04\n0.838626\n2300.0\n25.0\n\n\n7101\n2023-05-05\n0.829219\n2300.0\n25.0\n\n\n7108\n2023-05-06\n0.819026\n2300.0\n50.0\n\n\n7115\n2023-05-07\n0.852870\n2300.0\n25.0\n\n\n7122\n2023-05-08\n0.734566\n2300.0\n50.0\n\n\n7129\n2023-05-09\n0.687265\n2300.0\n25.0\n\n\n7136\n2023-05-10\n0.940301\n3500.0\n50.0\n\n\n7143\n2023-05-11\n0.605180\n2300.0\n10.0\n\n\n7150\n2023-05-12\n0.813111\n2300.0\n50.0\n\n\n\n\n\n\n\n\n\nCode\nsns.set()\n\nts = df_flight.set_index(\"datetime\").sort_index()\nkeep_cols = [\"date\", \"max_altitude_m\", \"length_km\", \"airtime_hours\"]\nts = ts[keep_cols]\nempty_row = pd.Series(name=pd.Timestamp.today(tz=\"UTC\"), data=[None,] * len(keep_cols), index=keep_cols)\nts = pd.concat([ts, empty_row.to_frame().transpose()])\n\n# compute reference statistics\nn_years = 6\nclim = ts.resample(\"1D\").mean(numeric_only=True)\nclim = clim.groupby(clim.index.isocalendar().week)\nclim = clim.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim = clim.sort_index().rolling(\"20D\", center=True).mean()\n\nclim_counts = ts.date.resample(\"1D\").count()\nclim_counts = clim_counts.where(clim_counts &gt; 0)\nclim_counts = clim_counts.groupby(clim_counts.index.isocalendar().week)\nclim_counts = clim_counts.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim_counts = clim_counts.sort_index().rolling(\"20D\", center=True).mean()\n\nclim = clim[clim.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\nclim_counts = clim_counts[clim_counts.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfs = df_flight[df_flight.datetime &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfg = dfs.groupby(df_flight.date).datetime.count()\n\nfig, axs = plt.subplots(4, sharex=True, figsize=(7, 10))\n\n# reference lines\naxs[0].plot(clim_counts.index, clim_counts.values, color=\"tab:red\")\naxs[1].plot(clim.index, clim.max_altitude_m, color=\"tab:red\")\naxs[2].plot(clim.index, clim.length_km, color=\"tab:red\")\naxs[3].plot(clim.index, clim.airtime_hours, color=\"tab:red\")\n\n# predictions\npred = df_pred[df_pred.leadtime_days==0].set_index(\"validtime\").sort_index()\naxs[0].twinx().step(pred.index, pred.flying_probability, color=\"gray\", alpha=0.5)\ntwinx = plt.gca()\ntwinx.grid(None)\ntwinx.set_ylim([0, 1])\ntwinx.set_ylabel(\"Flyability []\")\naxs[1].step(pred.index, pred.max_altitude_masl, color=\"gray\", alpha=0.5)\naxs[2].step(pred.index, pred.max_distance_km, color=\"gray\", alpha=0.5)\n\n# plot individual flights\nax0 = sns.scatterplot(x=dfg.index, y=dfg.values, marker=\"x\", ax=axs[0])\nax1 = sns.scatterplot(x=\"datetime\", y=\"max_altitude_m\", marker=\"x\", data=dfs, ax=axs[1])\nax2 = sns.scatterplot(x=\"datetime\", y=\"length_km\", marker=\"x\", data=dfs, ax=axs[2])\nax3 = sns.scatterplot(x=\"datetime\", y=\"airtime_hours\", marker=\"x\", data=dfs, ax=axs[3])\n\nax0.set(ylabel=\"No. flights per day\")\nax1.set(ylabel=\"Max altitude [m]\")\nax2.set(ylabel=\"Distance [km]\")\nax3.set(ylabel=\"Airtime [h]\")\n\nplt.xticks(rotation=30)\nplt.tight_layout()\n\n\n\n\n\nFigure 1: Overview over the past 90 days"
  },
  {
    "objectID": "statistics_montetamaro.html",
    "href": "statistics_montetamaro.html",
    "title": "Monte Tamaro",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 3\nCode\nfrom datetime import datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights\n\nengine = get_engine()\ndf = get_flights(engine, TARGET_SITE_ID)"
  },
  {
    "objectID": "statistics_montetamaro.html#annual-statistics",
    "href": "statistics_montetamaro.html#annual-statistics",
    "title": "Monte Tamaro",
    "section": "Annual statistics",
    "text": "Annual statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Year\")\n\n\n\n\n\nFigure 1: Total number of flights per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).max_altitude_m\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max altitude [masl]\", xlabel=\"Year\")\n\n\n\n\n\nFigure 2: Maximum flight altitude per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).length_km\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max distance [km]\")\n\n\n\n\n\nFigure 3: Maximum flight distance per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).airtime_hours\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max airtime [h]\")\n\n\n\n\n\nFigure 4: Maximum flight duration per year"
  },
  {
    "objectID": "statistics_montetamaro.html#monthly-statistics",
    "href": "statistics_montetamaro.html#monthly-statistics",
    "title": "Monte Tamaro",
    "section": "Monthly statistics",
    "text": "Monthly statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.month).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Month\")\n\n\n\n\n\nFigure 5: Total number of flights per month\n\n\n\n\n\n\nCode\nmonths = pd.date_range(\"1900-01-01\", \"1900-12-01\", freq='MS').strftime(\"%b\")\nax = sns.catplot(x=\"month\", y=\"max_altitude_m\", order=months, data=df)\n\n\n\n\n\nFigure 6: Maximum flight altitude per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"length_km\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 7: Maximum flight distance per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"airtime_hours\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 8: Maximum flight duration per month"
  },
  {
    "objectID": "statistics_cari.html",
    "href": "statistics_cari.html",
    "title": "Carì",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 2\nCode\nfrom datetime import datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights\n\nengine = get_engine()\ndf = get_flights(engine, TARGET_SITE_ID)"
  },
  {
    "objectID": "statistics_cari.html#annual-statistics",
    "href": "statistics_cari.html#annual-statistics",
    "title": "Carì",
    "section": "Annual statistics",
    "text": "Annual statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Year\")\n\n\n\n\n\nFigure 1: Total number of flights per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).max_altitude_m\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max altitude [masl]\", xlabel=\"Year\")\n\n\n\n\n\nFigure 2: Maximum flight altitude per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).length_km\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max distance [km]\")\n\n\n\n\n\nFigure 3: Maximum flight distance per year\n\n\n\n\n\n\nCode\ndfg = df.groupby(df.datetime.dt.year).airtime_hours\nmed = dfg.median()\nerr = (np.abs(dfg.quantile([0.1, 0.9]) - med)).unstack()\nax = med.plot.bar(yerr=err.values.T, ylabel=\"Max airtime [h]\")\n\n\n\n\n\nFigure 4: Maximum flight duration per year"
  },
  {
    "objectID": "statistics_cari.html#monthly-statistics",
    "href": "statistics_cari.html#monthly-statistics",
    "title": "Carì",
    "section": "Monthly statistics",
    "text": "Monthly statistics\n\n\nCode\ndfg = df.groupby(df.datetime.dt.month).datetime.count()\nax = dfg.plot(kind=\"bar\", ylabel=\"No. of flights []\", xlabel=\"Month\")\n\n\n\n\n\nFigure 5: Total number of flights per month\n\n\n\n\n\n\nCode\nmonths = pd.date_range(\"1900-01-01\", \"1900-12-01\", freq='MS').strftime(\"%b\")\nax = sns.catplot(x=\"month\", y=\"max_altitude_m\", order=months, data=df)\n\n\n\n\n\nFigure 6: Maximum flight altitude per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"length_km\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 7: Maximum flight distance per month\n\n\n\n\n\n\nCode\nax = sns.catplot(x=\"airtime_hours\", y=\"month\", order=months, data=df)\n\n\n\n\n\nFigure 8: Maximum flight duration per month"
  },
  {
    "objectID": "monitoring_montelema.html",
    "href": "monitoring_montelema.html",
    "title": "Monte Lema",
    "section": "",
    "text": "Code\nTARGET_SITE_ID = 6\n\n\n\n\nCode\nfrom datetime import date, datetime, timedelta, timezone\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom startleiter.utils import get_engine, get_flights, get_predictions\n\nengine = get_engine()\ndf_flight = get_flights(engine, TARGET_SITE_ID)\ndf_pred = get_predictions(engine, TARGET_SITE_ID)\n\n\n\n\nCode\ntoday_idx = df_pred.reftime==pd.to_datetime(date.today())\ndf_pred[today_idx].drop([\"id\", \"reftime\", \"source_id\", \"leadtime_days\"], axis=1)\n\n\n\n\n\n\nPredictions for the next days. \n\n\n\nvalidtime\nflying_probability\nmax_altitude_masl\nmax_distance_km\n\n\n\n\n7093\n2023-05-04\n0.504701\n3200.0\n25.0\n\n\n7100\n2023-05-05\n0.503479\n3200.0\n25.0\n\n\n7107\n2023-05-06\n0.486846\n2400.0\n50.0\n\n\n7114\n2023-05-07\n0.593267\n2400.0\n125.0\n\n\n7121\n2023-05-08\n0.372482\n2400.0\n50.0\n\n\n7128\n2023-05-09\n0.372262\n2400.0\n50.0\n\n\n7135\n2023-05-10\n0.755041\n3200.0\n125.0\n\n\n7142\n2023-05-11\n0.357997\n2400.0\n50.0\n\n\n7149\n2023-05-12\n0.598769\n2400.0\n50.0\n\n\n\n\n\n\n\n\n\nCode\nsns.set()\n\nts = df_flight.set_index(\"datetime\").sort_index()\nkeep_cols = [\"date\", \"max_altitude_m\", \"length_km\", \"airtime_hours\"]\nts = ts[keep_cols]\nempty_row = pd.Series(name=pd.Timestamp.today(tz=\"UTC\"), data=[None,] * len(keep_cols), index=keep_cols)\nts = pd.concat([ts, empty_row.to_frame().transpose()])\n\n# compute reference statistics\nn_years = 6\nclim = ts.resample(\"1D\").mean(numeric_only=True)\nclim = clim.groupby(clim.index.isocalendar().week)\nclim = clim.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim = clim.sort_index().rolling(\"20D\", center=True).mean()\n\nclim_counts = ts.date.resample(\"1D\").count()\nclim_counts = clim_counts.where(clim_counts &gt; 0)\nclim_counts = clim_counts.groupby(clim_counts.index.isocalendar().week)\nclim_counts = clim_counts.rolling(window=f\"{n_years * 365}D\", center=False).mean().reset_index(0, drop=True)\nclim_counts = clim_counts.sort_index().rolling(\"20D\", center=True).mean()\n\nclim = clim[clim.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\nclim_counts = clim_counts[clim_counts.index &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfs = df_flight[df_flight.datetime &gt; datetime.now(timezone.utc) - timedelta(days=90)]\ndfg = dfs.groupby(df_flight.date).datetime.count()\n\nfig, axs = plt.subplots(4, sharex=True, figsize=(7, 10))\n\n# reference lines\naxs[0].plot(clim_counts.index, clim_counts.values, color=\"tab:red\")\naxs[1].plot(clim.index, clim.max_altitude_m, color=\"tab:red\")\naxs[2].plot(clim.index, clim.length_km, color=\"tab:red\")\naxs[3].plot(clim.index, clim.airtime_hours, color=\"tab:red\")\n\n# predictions\npred = df_pred[df_pred.leadtime_days==0].set_index(\"validtime\").sort_index()\naxs[0].twinx().step(pred.index, pred.flying_probability, color=\"gray\", alpha=0.5)\ntwinx = plt.gca()\ntwinx.grid(None)\ntwinx.set_ylim([0, 1])\ntwinx.set_ylabel(\"Flyability []\")\naxs[1].step(pred.index, pred.max_altitude_masl, color=\"gray\", alpha=0.5)\naxs[2].step(pred.index, pred.max_distance_km, color=\"gray\", alpha=0.5)\n\n# plot individual flights\nax0 = sns.scatterplot(x=dfg.index, y=dfg.values, marker=\"x\", ax=axs[0])\nax1 = sns.scatterplot(x=\"datetime\", y=\"max_altitude_m\", marker=\"x\", data=dfs, ax=axs[1])\nax2 = sns.scatterplot(x=\"datetime\", y=\"length_km\", marker=\"x\", data=dfs, ax=axs[2])\nax3 = sns.scatterplot(x=\"datetime\", y=\"airtime_hours\", marker=\"x\", data=dfs, ax=axs[3])\n\nax0.set(ylabel=\"No. flights per day\")\nax1.set(ylabel=\"Max altitude [m]\")\nax2.set(ylabel=\"Distance [km]\")\nax3.set(ylabel=\"Airtime [h]\")\n\nplt.xticks(rotation=30)\nplt.tight_layout()\n\n\n\n\n\nFigure 1: Overview over the past 90 days"
  }
]